- name: All Tasks
  hosts: all
  gather_facts: yes
  become: yes

  vars_files:
    ./vars.yml

  tasks:
    - name: Role | Tailscale
      import_role:
        name: artis3n.tailscale
      vars:
        # Don't authenticate tailscale during the AMI build
        tailscale_up_skip: true

    - name: User | Create wiki user
      ansible.builtin.user:
        name: wiki
        state: present
      register: wiki_user

    - name: Ruby | Install Dependencies
      ansible.builtin.yum:
        name: '{{ yum_dependencies }}'
        state: present

    - name: Ruby | Install RVM
      ansible.builtin.import_role:
        name: rvm.ruby
      vars:
        rvm1_rubies:
          - 'ruby-{{ ruby_version }}'
        rvm1_bundler_install: True
        rvm1_install_path: '/usr/local/rvm'
        rvm1_install_flags: '--auto-dotfiles'
        rvm1_user: 'root'
      tags:
        - molecule-idempotence-notest

    - name: Gollum | Remove required yum packages
      ansible.builtin.yum:
        name: '{{ gollum_yum_remove_dependencies }}'
        state: absent

    - name: Gollum | Unarchive cmake
      ansible.builtin.unarchive:
        src: 'https://cmake.org/files/v{{ cmake_version }}/cmake-{{ cmake_version }}.0.tar.gz'
        dest: '/tmp'
        remote_src: yes

    - name: Gollum | Bootstrap cmake - will take some time
      ansible.builtin.shell:
        cmd: './bootstrap && touch /tmp/cmake-bootstrapped'
        chdir: '/tmp/cmake-{{ cmake_version }}.0'
        creates: '/tmp/cmake-bootstrapped'
      async: 1800

    - name: Gollum | Make cmake - will take some time
      ansible.builtin.shell:
        cmd: 'make && touch /tmp/cmake-maked'
        chdir: '/tmp/cmake-{{ cmake_version }}.0'
        creates: '/tmp/cmake-maked'
      async: 1800

    - name: Gollum | Install cmake
      ansible.builtin.command:
        cmd: 'make install'
        chdir: '/tmp/cmake-{{ cmake_version }}.0'
        creates: '/usr/local/bin/cmake'

    - name: Gollum | Install Gems
      community.general.gem:
        name: '{{ item }}'
        state: present
        user_install: no
      loop: '{{ gollum_gems }}'

    - name: Wiki | Create Directory
      ansible.builtin.file:
        path: '{{ wiki_dir_path }}'
        state: directory
        owner: '{{ wiki_user.name }}'
        group: '{{ wiki_user.name }}'
        mode: '0755'

    - name: Wiki | Create SSH Directory
      ansible.builtin.file:
        path: '{{ wiki_user.home }}/.ssh'
        state: directory
        owner: '{{ wiki_user.name }}'
        group: '{{ wiki_user.name }}'
        mode: '0700'
      register: ssh_dir

    - name: Wiki | Copy Deploy Key
      ansible.builtin.copy:
        src: './files/wiki_deploy_key'
        dest: '{{ ssh_dir.path }}/{{ wiki_deploy_key }}'
        owner: '{{ wiki_user.name }}'
        group: '{{ wiki_user.name }}'
        mode: '0600'

    - name: Wiki | Clone Wiki Repo
      ansible.builtin.git:
        repo: '{{ wiki_repo }}'
        dest: '{{ wiki_dir_path }}'
        version: 'main'
        accept_hostkey: yes
        key_file: '{{ ssh_dir.path }}/{{ wiki_deploy_key }}'
      become_user: '{{ wiki_user.name }}'

    - name: Wiki | Copy Sync Script
      ansible.builtin.copy:
        src: './files/backup.sh'
        dest: '{{ wiki_user.home }}/backup.sh'
        owner: '{{ wiki_user.name }}'
        group: '{{ wiki_user.name }}'
        mode: '0755'

    - name: Wiki | Set Sync Cron
      ansible.builtin.cron:
        name: 'Sync wiki'
        job: '{{ wiki_user.home }}/backup.sh'

    - name: Wiki | Copy Service File
      ansible.builtin.template:
        src: './files/gollum.service.j2'
        dest: '/etc/systemd/system/gollum.service'
        owner: '{{ wiki_user.name }}'
        group: '{{ wiki_user.name }}'
        mode: '0755'

    - name: Wiki | Enable Systemd Service
      ansible.builtin.systemd:
        name: 'gollum.service'
        state: started
        enabled: yes
        daemon_reload: yes
      register: wiki_service

    - name: Test
      debug:
        var: wiki_service
